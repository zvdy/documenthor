[
  {
    "repository_name": "flask-user-service",
    "repository_structure": {
      "app.py": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport os\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///users.db')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(120), nullable=False)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    return jsonify({'status': 'healthy', 'service': 'user-service'})\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    user = User(\n        username=data['username'],\n        email=data['email']\n    )\n    user.set_password(data['password'])\n    db.session.add(user)\n    db.session.commit()\n    return jsonify({'id': user.id, 'username': user.username}), 201\n\n@app.route('/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    user = User.query.get_or_404(user_id)\n    return jsonify({'id': user.id, 'username': user.username, 'email': user.email})\n\n@app.route('/users', methods=['GET'])\ndef list_users():\n    users = User.query.all()\n    return jsonify([{'id': u.id, 'username': u.username, 'email': u.email} for u in users])\n\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n    app.run(debug=True, host='0.0.0.0', port=5000)",
      "requirements.txt": "Flask==2.3.3\nFlask-SQLAlchemy==3.0.5\nWerkzeug==2.3.7\npytest==7.4.2\npytest-flask==1.2.0\nrequests==2.31.0",
      "config.py": "import os\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key'\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///users.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n\nclass ProductionConfig(Config):\n    DEBUG = False\n\nconfig = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}",
      "tests/test_app.py": "import pytest\nimport json\nfrom app import app, db, User\n\n@pytest.fixture\ndef client():\n    app.config['TESTING'] = True\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\n    with app.test_client() as client:\n        with app.app_context():\n            db.create_all()\n        yield client\n\ndef test_health_check(client):\n    response = client.get('/health')\n    assert response.status_code == 200\n    data = json.loads(response.data)\n    assert data['status'] == 'healthy'\n\ndef test_create_user(client):\n    response = client.post('/users', \n                        json={'username': 'testuser', 'email': 'test@example.com', 'password': 'password123'})\n    assert response.status_code == 201\n    data = json.loads(response.data)\n    assert data['username'] == 'testuser'\n\ndef test_get_user(client):\n    # First create a user\n    client.post('/users', json={'username': 'testuser', 'email': 'test@example.com', 'password': 'password123'})\n    response = client.get('/users/1')\n    assert response.status_code == 200\n    data = json.loads(response.data)\n    assert data['username'] == 'testuser'",
      "Dockerfile": "FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nEXPOSE 5000\n\nCMD [\"python\", \"app.py\"]",
      "docker-compose.yml": "version: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@db:5432/userdb\n    depends_on:\n      - db\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=userdb\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:"
    },
    "expected_readme": "# Flask User Service\n\nA RESTful microservice for user management built with Flask and SQLAlchemy.\n\n## Features\n\n- User registration and management\n- Password hashing with Werkzeug\n- SQLAlchemy ORM with PostgreSQL/SQLite support\n- Docker containerization\n- Comprehensive test suite\n- Health check endpoint\n- Production-ready configuration\n\n## Quick Start\n\n### Local Development\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd flask-user-service\n```\n\n2. Create a virtual environment:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n4. Run the application:\n```bash\npython app.py\n```\n\nThe service will be available at `http://localhost:5000`\n\n### Docker\n\n1. Build and run with Docker Compose:\n```bash\ndocker-compose up --build\n```\n\nThis will start the Flask app with a PostgreSQL database.\n\n## API Endpoints\n\n### Health Check\n```\nGET /health\n```\nReturns service status.\n\n### User Management\n\n#### Create User\n```\nPOST /users\nContent-Type: application/json\n\n{\n  \"username\": \"johndoe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"securepassword\"\n}\n```\n\n#### Get User\n```\nGET /users/{user_id}\n```\n\n#### List All Users\n```\nGET /users\n```\n\n## Testing\n\nRun the test suite:\n```bash\npytest tests/\n```\n\nRun with coverage:\n```bash\npytest tests/ --cov=app\n```\n\n## Configuration\n\nThe application supports different environments through configuration classes:\n\n- Development: SQLite database, debug mode enabled\n- Production: PostgreSQL database, debug mode disabled\n\n### Environment Variables\n\n- `DATABASE_URL` - Database connection string\n- `SECRET_KEY` - Flask secret key for sessions\n- `FLASK_ENV` - Environment (development/production)\n\n## Database Schema\n\n### User Model\n- `id` (Integer, Primary Key)\n- `username` (String, Unique)\n- `email` (String, Unique)\n- `password_hash` (String)\n\n## Security\n\n- Passwords are hashed using Werkzeug's security functions\n- Input validation on all endpoints\n- SQL injection protection through SQLAlchemy ORM\n\n## Deployment\n\nThe service is containerized and can be deployed to any Docker-compatible platform:\n\n- Kubernetes\n- Docker Swarm\n- Cloud platforms (AWS ECS, Google Cloud Run, etc.)\n\n## License\n\nMIT License"
  }
]
