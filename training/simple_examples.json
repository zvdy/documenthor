[
  {
    "input": "Generate a README for a Python Flask API with the following structure:\n\nFiles: app.py (main Flask app), requirements.txt (Flask, SQLAlchemy), tests/ (pytest tests)\nFeatures: User management API, SQLite database, REST endpoints\nEndpoints: GET /users, POST /users, GET /users/<id>",
    "output": "# Flask User API\n\nA simple REST API for user management built with Flask and SQLAlchemy.\n\n## Features\n\n- User CRUD operations\n- SQLite database integration\n- RESTful API design\n- Comprehensive test suite\n\n## Quick Start\n\n1. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n2. Run the application:\n```bash\npython app.py\n```\n\n## API Endpoints\n\n### Users\n\n- `GET /users` - List all users\n- `POST /users` - Create a new user\n- `GET /users/<id>` - Get user by ID\n\n### Example Usage\n\n```bash\n# Create a user\ncurl -X POST http://localhost:5000/users \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"john\", \"email\": \"john@example.com\"}'\n\n# Get all users\ncurl http://localhost:5000/users\n```\n\n## Testing\n\nRun tests with pytest:\n```bash\npytest tests/\n```\n\n## License\n\nMIT License"
  },
  {
    "input": "Generate a README for a Node.js Express microservice with the following structure:\n\nFiles: index.js (Express server), package.json (express, cors, helmet), Dockerfile\nFeatures: JWT authentication, MongoDB, Docker support, health checks\nEndpoints: POST /auth/login, POST /auth/register, GET /health",
    "output": "# Express Authentication Service\n\nA JWT-based authentication microservice built with Express.js and MongoDB.\n\n## Features\n\n- JWT token authentication\n- User registration and login\n- MongoDB integration\n- Docker containerization\n- Security middleware (CORS, Helmet)\n- Health check endpoint\n\n## Quick Start\n\n### Local Development\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Set environment variables:\n```bash\ncp .env.example .env\n# Edit .env with your MongoDB URI and JWT secret\n```\n\n3. Start the server:\n```bash\nnpm start\n```\n\n### Docker\n\n```bash\ndocker build -t auth-service .\ndocker run -p 3000:3000 auth-service\n```\n\n## API Documentation\n\n### Authentication\n\n#### Register User\n```http\nPOST /auth/register\nContent-Type: application/json\n\n{\n  \"username\": \"john\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}\n```\n\n#### Login\n```http\nPOST /auth/login\nContent-Type: application/json\n\n{\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}\n```\n\n### Health Check\n```http\nGET /health\n```\n\n## Environment Variables\n\n- `MONGODB_URI` - MongoDB connection string\n- `JWT_SECRET` - Secret for JWT tokens\n- `PORT` - Server port (default: 3000)\n\n## License\n\nMIT License"
  }
]
